$date
	Thu May 08 16:23:32 2025
$end
$version
	ModelSim Version 10.1c
$end
$timescale
	1ps
$end
$scope module tb_basic_6x6_mul $end
$var parameter 32 ! width $end
$var reg 6 " x [5:0] $end
$var reg 6 # y [5:0] $end
$var wire 1 $ mul_out [11] $end
$var wire 1 % mul_out [10] $end
$var wire 1 & mul_out [9] $end
$var wire 1 ' mul_out [8] $end
$var wire 1 ( mul_out [7] $end
$var wire 1 ) mul_out [6] $end
$var wire 1 * mul_out [5] $end
$var wire 1 + mul_out [4] $end
$var wire 1 , mul_out [3] $end
$var wire 1 - mul_out [2] $end
$var wire 1 . mul_out [1] $end
$var wire 1 / mul_out [0] $end
$var reg 1 0 clk $end
$scope module u_basic_mul_top $end
$var parameter 32 1 width $end
$var wire 1 2 x [5] $end
$var wire 1 3 x [4] $end
$var wire 1 4 x [3] $end
$var wire 1 5 x [2] $end
$var wire 1 6 x [1] $end
$var wire 1 7 x [0] $end
$var wire 1 8 y [5] $end
$var wire 1 9 y [4] $end
$var wire 1 : y [3] $end
$var wire 1 ; y [2] $end
$var wire 1 < y [1] $end
$var wire 1 = y [0] $end
$var wire 1 $ mul_out [11] $end
$var wire 1 % mul_out [10] $end
$var wire 1 & mul_out [9] $end
$var wire 1 ' mul_out [8] $end
$var wire 1 ( mul_out [7] $end
$var wire 1 ) mul_out [6] $end
$var wire 1 * mul_out [5] $end
$var wire 1 + mul_out [4] $end
$var wire 1 , mul_out [3] $end
$var wire 1 - mul_out [2] $end
$var wire 1 . mul_out [1] $end
$var wire 1 / mul_out [0] $end
$var wire 1 > mul_row_out $end
$var wire 1 ? r_data_chain $end
$var wire 1 @ mul_row_cout [6] $end
$var wire 1 A mul_row_cout [5] $end
$var wire 1 B mul_row_cout [4] $end
$var wire 1 C mul_row_cout [3] $end
$var wire 1 D mul_row_cout [2] $end
$var wire 1 E mul_row_cout [1] $end
$var wire 1 F mul_row_cout [0] $end
$scope begin gen_mul_row[5] $end
$var parameter 32 G i $end
$scope module u_mul_row $end
$var parameter 32 H x_width $end
$var parameter 32 I row_now $end
$var wire 1 2 x_data [5] $end
$var wire 1 3 x_data [4] $end
$var wire 1 4 x_data [3] $end
$var wire 1 5 x_data [2] $end
$var wire 1 6 x_data [1] $end
$var wire 1 7 x_data [0] $end
$var wire 1 J r_data [5] $end
$var wire 1 K r_data [4] $end
$var wire 1 L r_data [3] $end
$var wire 1 M r_data [2] $end
$var wire 1 N r_data [1] $end
$var wire 1 O r_data [0] $end
$var wire 1 8 y_abit $end
$var wire 1 P o_data [5] $end
$var wire 1 Q o_data [4] $end
$var wire 1 R o_data [3] $end
$var wire 1 S o_data [2] $end
$var wire 1 T o_data [1] $end
$var wire 1 > o_data [0] $end
$var wire 1 @ o_cout $end
$scope begin gen_last_row $end
$var wire 1 U a_data [5] $end
$var wire 1 V a_data [4] $end
$var wire 1 W a_data [3] $end
$var wire 1 X a_data [2] $end
$var wire 1 Y a_data [1] $end
$var wire 1 Z a_data [0] $end
$var wire 1 [ b_data [5] $end
$var wire 1 \ b_data [4] $end
$var wire 1 ] b_data [3] $end
$var wire 1 ^ b_data [2] $end
$var wire 1 _ b_data [1] $end
$var wire 1 ` b_data [0] $end
$var wire 1 a c_data [5] $end
$var wire 1 b c_data [4] $end
$var wire 1 c c_data [3] $end
$var wire 1 d c_data [2] $end
$var wire 1 e c_data [1] $end
$var wire 1 f c_data [0] $end
$scope begin gen_last_row_adder[5] $end
$var parameter 32 g i $end
$scope begin gen_last_row_adderx_FA $end
$scope module u_full_adder $end
$var wire 1 U a $end
$var wire 1 [ b $end
$var wire 1 b cin $end
$var wire 1 P sum $end
$var wire 1 a cout $end
$var wire 1 h gen_c $end
$var wire 1 i pro_c $end
$upscope $end
$upscope $end
$upscope $end
$scope begin gen_last_row_adder[4] $end
$var parameter 32 j i $end
$scope begin gen_last_row_adderx_FA $end
$scope module u_full_adder $end
$var wire 1 V a $end
$var wire 1 \ b $end
$var wire 1 c cin $end
$var wire 1 Q sum $end
$var wire 1 b cout $end
$var wire 1 k gen_c $end
$var wire 1 l pro_c $end
$upscope $end
$upscope $end
$upscope $end
$scope begin gen_last_row_adder[3] $end
$var parameter 32 m i $end
$scope begin gen_last_row_adderx_FA $end
$scope module u_full_adder $end
$var wire 1 W a $end
$var wire 1 ] b $end
$var wire 1 d cin $end
$var wire 1 R sum $end
$var wire 1 c cout $end
$var wire 1 n gen_c $end
$var wire 1 o pro_c $end
$upscope $end
$upscope $end
$upscope $end
$scope begin gen_last_row_adder[2] $end
$var parameter 32 p i $end
$scope begin gen_last_row_adderx_FA $end
$scope module u_full_adder $end
$var wire 1 X a $end
$var wire 1 ^ b $end
$var wire 1 e cin $end
$var wire 1 S sum $end
$var wire 1 d cout $end
$var wire 1 q gen_c $end
$var wire 1 r pro_c $end
$upscope $end
$upscope $end
$upscope $end
$scope begin gen_last_row_adder[1] $end
$var parameter 32 s i $end
$scope begin gen_last_row_adderx_FA $end
$scope module u_full_adder $end
$var wire 1 Y a $end
$var wire 1 _ b $end
$var wire 1 f cin $end
$var wire 1 T sum $end
$var wire 1 e cout $end
$var wire 1 t gen_c $end
$var wire 1 u pro_c $end
$upscope $end
$upscope $end
$upscope $end
$scope begin gen_last_row_adder[0] $end
$var parameter 32 v i $end
$scope begin gen_last_row_adder0_HA $end
$scope module u_half_adder $end
$var wire 1 Z a $end
$var wire 1 ` b $end
$var wire 1 > sum $end
$var wire 1 f cout $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$scope begin gen_mul_row[4] $end
$var parameter 32 w i $end
$scope module u_mul_row $end
$var parameter 32 x x_width $end
$var parameter 32 y row_now $end
$var wire 1 2 x_data [5] $end
$var wire 1 3 x_data [4] $end
$var wire 1 4 x_data [3] $end
$var wire 1 5 x_data [2] $end
$var wire 1 6 x_data [1] $end
$var wire 1 7 x_data [0] $end
$var wire 1 z r_data [5] $end
$var wire 1 { r_data [4] $end
$var wire 1 | r_data [3] $end
$var wire 1 } r_data [2] $end
$var wire 1 ~ r_data [1] $end
$var wire 1 !! r_data [0] $end
$var wire 1 9 y_abit $end
$var wire 1 "! o_data [5] $end
$var wire 1 #! o_data [4] $end
$var wire 1 $! o_data [3] $end
$var wire 1 %! o_data [2] $end
$var wire 1 &! o_data [1] $end
$var wire 1 '! o_data [0] $end
$var wire 1 A o_cout $end
$scope begin gen_mid_row $end
$var wire 1 (! a_data [5] $end
$var wire 1 )! a_data [4] $end
$var wire 1 *! a_data [3] $end
$var wire 1 +! a_data [2] $end
$var wire 1 ,! a_data [1] $end
$var wire 1 -! a_data [0] $end
$var wire 1 .! b_data [5] $end
$var wire 1 /! b_data [4] $end
$var wire 1 0! b_data [3] $end
$var wire 1 1! b_data [2] $end
$var wire 1 2! b_data [1] $end
$var wire 1 3! b_data [0] $end
$var wire 1 4! c_data [5] $end
$var wire 1 5! c_data [4] $end
$var wire 1 6! c_data [3] $end
$var wire 1 7! c_data [2] $end
$var wire 1 8! c_data [1] $end
$var wire 1 9! c_data [0] $end
$scope begin gen_last_row_adder[5] $end
$var parameter 32 :! i $end
$scope begin gen_last_row_adderl_HA $end
$scope module u_full_adder $end
$var wire 1 (! a $end
$var wire 1 .! b $end
$var wire 1 "! sum $end
$var wire 1 4! cout $end
$upscope $end
$upscope $end
$upscope $end
$scope begin gen_last_row_adder[4] $end
$var parameter 32 ;! i $end
$scope begin gen_last_row_adderx_FA $end
$scope module u_full_adder $end
$var wire 1 )! a $end
$var wire 1 /! b $end
$var wire 1 6! cin $end
$var wire 1 #! sum $end
$var wire 1 5! cout $end
$var wire 1 <! gen_c $end
$var wire 1 =! pro_c $end
$upscope $end
$upscope $end
$upscope $end
$scope begin gen_last_row_adder[3] $end
$var parameter 32 >! i $end
$scope begin gen_last_row_adderx_FA $end
$scope module u_full_adder $end
$var wire 1 *! a $end
$var wire 1 0! b $end
$var wire 1 7! cin $end
$var wire 1 $! sum $end
$var wire 1 6! cout $end
$var wire 1 ?! gen_c $end
$var wire 1 @! pro_c $end
$upscope $end
$upscope $end
$upscope $end
$scope begin gen_last_row_adder[2] $end
$var parameter 32 A! i $end
$scope begin gen_last_row_adderx_FA $end
$scope module u_full_adder $end
$var wire 1 +! a $end
$var wire 1 1! b $end
$var wire 1 8! cin $end
$var wire 1 %! sum $end
$var wire 1 7! cout $end
$var wire 1 B! gen_c $end
$var wire 1 C! pro_c $end
$upscope $end
$upscope $end
$upscope $end
$scope begin gen_last_row_adder[1] $end
$var parameter 32 D! i $end
$scope begin gen_last_row_adderx_FA $end
$scope module u_full_adder $end
$var wire 1 ,! a $end
$var wire 1 2! b $end
$var wire 1 9! cin $end
$var wire 1 &! sum $end
$var wire 1 8! cout $end
$var wire 1 E! gen_c $end
$var wire 1 F! pro_c $end
$upscope $end
$upscope $end
$upscope $end
$scope begin gen_last_row_adder[0] $end
$var parameter 32 G! i $end
$scope begin gen_last_row_adder0_HA $end
$scope module u_half_adder $end
$var wire 1 -! a $end
$var wire 1 3! b $end
$var wire 1 '! sum $end
$var wire 1 9! cout $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$scope begin gen_mul_row[3] $end
$var parameter 32 H! i $end
$scope module u_mul_row $end
$var parameter 32 I! x_width $end
$var parameter 32 J! row_now $end
$var wire 1 2 x_data [5] $end
$var wire 1 3 x_data [4] $end
$var wire 1 4 x_data [3] $end
$var wire 1 5 x_data [2] $end
$var wire 1 6 x_data [1] $end
$var wire 1 7 x_data [0] $end
$var wire 1 K! r_data [5] $end
$var wire 1 L! r_data [4] $end
$var wire 1 M! r_data [3] $end
$var wire 1 N! r_data [2] $end
$var wire 1 O! r_data [1] $end
$var wire 1 P! r_data [0] $end
$var wire 1 : y_abit $end
$var wire 1 Q! o_data [5] $end
$var wire 1 R! o_data [4] $end
$var wire 1 S! o_data [3] $end
$var wire 1 T! o_data [2] $end
$var wire 1 U! o_data [1] $end
$var wire 1 V! o_data [0] $end
$var wire 1 B o_cout $end
$scope begin gen_mid_row $end
$var wire 1 W! a_data [5] $end
$var wire 1 X! a_data [4] $end
$var wire 1 Y! a_data [3] $end
$var wire 1 Z! a_data [2] $end
$var wire 1 [! a_data [1] $end
$var wire 1 \! a_data [0] $end
$var wire 1 ]! b_data [5] $end
$var wire 1 ^! b_data [4] $end
$var wire 1 _! b_data [3] $end
$var wire 1 `! b_data [2] $end
$var wire 1 a! b_data [1] $end
$var wire 1 b! b_data [0] $end
$var wire 1 c! c_data [5] $end
$var wire 1 d! c_data [4] $end
$var wire 1 e! c_data [3] $end
$var wire 1 f! c_data [2] $end
$var wire 1 g! c_data [1] $end
$var wire 1 h! c_data [0] $end
$scope begin gen_last_row_adder[5] $end
$var parameter 32 i! i $end
$scope begin gen_last_row_adderl_HA $end
$scope module u_full_adder $end
$var wire 1 W! a $end
$var wire 1 ]! b $end
$var wire 1 Q! sum $end
$var wire 1 c! cout $end
$upscope $end
$upscope $end
$upscope $end
$scope begin gen_last_row_adder[4] $end
$var parameter 32 j! i $end
$scope begin gen_last_row_adderx_FA $end
$scope module u_full_adder $end
$var wire 1 X! a $end
$var wire 1 ^! b $end
$var wire 1 e! cin $end
$var wire 1 R! sum $end
$var wire 1 d! cout $end
$var wire 1 k! gen_c $end
$var wire 1 l! pro_c $end
$upscope $end
$upscope $end
$upscope $end
$scope begin gen_last_row_adder[3] $end
$var parameter 32 m! i $end
$scope begin gen_last_row_adderx_FA $end
$scope module u_full_adder $end
$var wire 1 Y! a $end
$var wire 1 _! b $end
$var wire 1 f! cin $end
$var wire 1 S! sum $end
$var wire 1 e! cout $end
$var wire 1 n! gen_c $end
$var wire 1 o! pro_c $end
$upscope $end
$upscope $end
$upscope $end
$scope begin gen_last_row_adder[2] $end
$var parameter 32 p! i $end
$scope begin gen_last_row_adderx_FA $end
$scope module u_full_adder $end
$var wire 1 Z! a $end
$var wire 1 `! b $end
$var wire 1 g! cin $end
$var wire 1 T! sum $end
$var wire 1 f! cout $end
$var wire 1 q! gen_c $end
$var wire 1 r! pro_c $end
$upscope $end
$upscope $end
$upscope $end
$scope begin gen_last_row_adder[1] $end
$var parameter 32 s! i $end
$scope begin gen_last_row_adderx_FA $end
$scope module u_full_adder $end
$var wire 1 [! a $end
$var wire 1 a! b $end
$var wire 1 h! cin $end
$var wire 1 U! sum $end
$var wire 1 g! cout $end
$var wire 1 t! gen_c $end
$var wire 1 u! pro_c $end
$upscope $end
$upscope $end
$upscope $end
$scope begin gen_last_row_adder[0] $end
$var parameter 32 v! i $end
$scope begin gen_last_row_adder0_HA $end
$scope module u_half_adder $end
$var wire 1 \! a $end
$var wire 1 b! b $end
$var wire 1 V! sum $end
$var wire 1 h! cout $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$scope begin gen_mul_row[2] $end
$var parameter 32 w! i $end
$scope module u_mul_row $end
$var parameter 32 x! x_width $end
$var parameter 32 y! row_now $end
$var wire 1 2 x_data [5] $end
$var wire 1 3 x_data [4] $end
$var wire 1 4 x_data [3] $end
$var wire 1 5 x_data [2] $end
$var wire 1 6 x_data [1] $end
$var wire 1 7 x_data [0] $end
$var wire 1 z! r_data [5] $end
$var wire 1 {! r_data [4] $end
$var wire 1 |! r_data [3] $end
$var wire 1 }! r_data [2] $end
$var wire 1 ~! r_data [1] $end
$var wire 1 !" r_data [0] $end
$var wire 1 ; y_abit $end
$var wire 1 "" o_data [5] $end
$var wire 1 #" o_data [4] $end
$var wire 1 $" o_data [3] $end
$var wire 1 %" o_data [2] $end
$var wire 1 &" o_data [1] $end
$var wire 1 '" o_data [0] $end
$var wire 1 C o_cout $end
$scope begin gen_mid_row $end
$var wire 1 (" a_data [5] $end
$var wire 1 )" a_data [4] $end
$var wire 1 *" a_data [3] $end
$var wire 1 +" a_data [2] $end
$var wire 1 ," a_data [1] $end
$var wire 1 -" a_data [0] $end
$var wire 1 ." b_data [5] $end
$var wire 1 /" b_data [4] $end
$var wire 1 0" b_data [3] $end
$var wire 1 1" b_data [2] $end
$var wire 1 2" b_data [1] $end
$var wire 1 3" b_data [0] $end
$var wire 1 4" c_data [5] $end
$var wire 1 5" c_data [4] $end
$var wire 1 6" c_data [3] $end
$var wire 1 7" c_data [2] $end
$var wire 1 8" c_data [1] $end
$var wire 1 9" c_data [0] $end
$scope begin gen_last_row_adder[5] $end
$var parameter 32 :" i $end
$scope begin gen_last_row_adderl_HA $end
$scope module u_full_adder $end
$var wire 1 (" a $end
$var wire 1 ." b $end
$var wire 1 "" sum $end
$var wire 1 4" cout $end
$upscope $end
$upscope $end
$upscope $end
$scope begin gen_last_row_adder[4] $end
$var parameter 32 ;" i $end
$scope begin gen_last_row_adderx_FA $end
$scope module u_full_adder $end
$var wire 1 )" a $end
$var wire 1 /" b $end
$var wire 1 6" cin $end
$var wire 1 #" sum $end
$var wire 1 5" cout $end
$var wire 1 <" gen_c $end
$var wire 1 =" pro_c $end
$upscope $end
$upscope $end
$upscope $end
$scope begin gen_last_row_adder[3] $end
$var parameter 32 >" i $end
$scope begin gen_last_row_adderx_FA $end
$scope module u_full_adder $end
$var wire 1 *" a $end
$var wire 1 0" b $end
$var wire 1 7" cin $end
$var wire 1 $" sum $end
$var wire 1 6" cout $end
$var wire 1 ?" gen_c $end
$var wire 1 @" pro_c $end
$upscope $end
$upscope $end
$upscope $end
$scope begin gen_last_row_adder[2] $end
$var parameter 32 A" i $end
$scope begin gen_last_row_adderx_FA $end
$scope module u_full_adder $end
$var wire 1 +" a $end
$var wire 1 1" b $end
$var wire 1 8" cin $end
$var wire 1 %" sum $end
$var wire 1 7" cout $end
$var wire 1 B" gen_c $end
$var wire 1 C" pro_c $end
$upscope $end
$upscope $end
$upscope $end
$scope begin gen_last_row_adder[1] $end
$var parameter 32 D" i $end
$scope begin gen_last_row_adderx_FA $end
$scope module u_full_adder $end
$var wire 1 ," a $end
$var wire 1 2" b $end
$var wire 1 9" cin $end
$var wire 1 &" sum $end
$var wire 1 8" cout $end
$var wire 1 E" gen_c $end
$var wire 1 F" pro_c $end
$upscope $end
$upscope $end
$upscope $end
$scope begin gen_last_row_adder[0] $end
$var parameter 32 G" i $end
$scope begin gen_last_row_adder0_HA $end
$scope module u_half_adder $end
$var wire 1 -" a $end
$var wire 1 3" b $end
$var wire 1 '" sum $end
$var wire 1 9" cout $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$scope begin gen_mul_row[1] $end
$var parameter 32 H" i $end
$scope module u_mul_row $end
$var parameter 32 I" x_width $end
$var parameter 32 J" row_now $end
$var wire 1 2 x_data [5] $end
$var wire 1 3 x_data [4] $end
$var wire 1 4 x_data [3] $end
$var wire 1 5 x_data [2] $end
$var wire 1 6 x_data [1] $end
$var wire 1 7 x_data [0] $end
$var wire 1 K" r_data [5] $end
$var wire 1 L" r_data [4] $end
$var wire 1 M" r_data [3] $end
$var wire 1 N" r_data [2] $end
$var wire 1 O" r_data [1] $end
$var wire 1 P" r_data [0] $end
$var wire 1 < y_abit $end
$var wire 1 Q" o_data [5] $end
$var wire 1 R" o_data [4] $end
$var wire 1 S" o_data [3] $end
$var wire 1 T" o_data [2] $end
$var wire 1 U" o_data [1] $end
$var wire 1 V" o_data [0] $end
$var wire 1 D o_cout $end
$scope begin gen_mid_row $end
$var wire 1 W" a_data [5] $end
$var wire 1 X" a_data [4] $end
$var wire 1 Y" a_data [3] $end
$var wire 1 Z" a_data [2] $end
$var wire 1 [" a_data [1] $end
$var wire 1 \" a_data [0] $end
$var wire 1 ]" b_data [5] $end
$var wire 1 ^" b_data [4] $end
$var wire 1 _" b_data [3] $end
$var wire 1 `" b_data [2] $end
$var wire 1 a" b_data [1] $end
$var wire 1 b" b_data [0] $end
$var wire 1 c" c_data [5] $end
$var wire 1 d" c_data [4] $end
$var wire 1 e" c_data [3] $end
$var wire 1 f" c_data [2] $end
$var wire 1 g" c_data [1] $end
$var wire 1 h" c_data [0] $end
$scope begin gen_last_row_adder[5] $end
$var parameter 32 i" i $end
$scope begin gen_last_row_adderl_HA $end
$scope module u_full_adder $end
$var wire 1 W" a $end
$var wire 1 ]" b $end
$var wire 1 Q" sum $end
$var wire 1 c" cout $end
$upscope $end
$upscope $end
$upscope $end
$scope begin gen_last_row_adder[4] $end
$var parameter 32 j" i $end
$scope begin gen_last_row_adderx_FA $end
$scope module u_full_adder $end
$var wire 1 X" a $end
$var wire 1 ^" b $end
$var wire 1 e" cin $end
$var wire 1 R" sum $end
$var wire 1 d" cout $end
$var wire 1 k" gen_c $end
$var wire 1 l" pro_c $end
$upscope $end
$upscope $end
$upscope $end
$scope begin gen_last_row_adder[3] $end
$var parameter 32 m" i $end
$scope begin gen_last_row_adderx_FA $end
$scope module u_full_adder $end
$var wire 1 Y" a $end
$var wire 1 _" b $end
$var wire 1 f" cin $end
$var wire 1 S" sum $end
$var wire 1 e" cout $end
$var wire 1 n" gen_c $end
$var wire 1 o" pro_c $end
$upscope $end
$upscope $end
$upscope $end
$scope begin gen_last_row_adder[2] $end
$var parameter 32 p" i $end
$scope begin gen_last_row_adderx_FA $end
$scope module u_full_adder $end
$var wire 1 Z" a $end
$var wire 1 `" b $end
$var wire 1 g" cin $end
$var wire 1 T" sum $end
$var wire 1 f" cout $end
$var wire 1 q" gen_c $end
$var wire 1 r" pro_c $end
$upscope $end
$upscope $end
$upscope $end
$scope begin gen_last_row_adder[1] $end
$var parameter 32 s" i $end
$scope begin gen_last_row_adderx_FA $end
$scope module u_full_adder $end
$var wire 1 [" a $end
$var wire 1 a" b $end
$var wire 1 h" cin $end
$var wire 1 U" sum $end
$var wire 1 g" cout $end
$var wire 1 t" gen_c $end
$var wire 1 u" pro_c $end
$upscope $end
$upscope $end
$upscope $end
$scope begin gen_last_row_adder[0] $end
$var parameter 32 v" i $end
$scope begin gen_last_row_adder0_HA $end
$scope module u_half_adder $end
$var wire 1 \" a $end
$var wire 1 b" b $end
$var wire 1 V" sum $end
$var wire 1 h" cout $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$scope begin gen_mul_row[0] $end
$var parameter 32 w" i $end
$scope module u_mul_row $end
$var parameter 32 x" x_width $end
$var parameter 32 y" row_now $end
$var wire 1 2 x_data [5] $end
$var wire 1 3 x_data [4] $end
$var wire 1 4 x_data [3] $end
$var wire 1 5 x_data [2] $end
$var wire 1 6 x_data [1] $end
$var wire 1 7 x_data [0] $end
$var wire 1 z" r_data [5] $end
$var wire 1 {" r_data [4] $end
$var wire 1 |" r_data [3] $end
$var wire 1 }" r_data [2] $end
$var wire 1 ~" r_data [1] $end
$var wire 1 !# r_data [0] $end
$var wire 1 = y_abit $end
$var wire 1 "# o_data [5] $end
$var wire 1 ## o_data [4] $end
$var wire 1 $# o_data [3] $end
$var wire 1 %# o_data [2] $end
$var wire 1 &# o_data [1] $end
$var wire 1 '# o_data [0] $end
$var wire 1 E o_cout $end
$scope begin gen_first_row $end
$upscope $end
$upscope $end
$upscope $end
$scope begin genblk1[6] $end
$var parameter 32 (# j $end
$upscope $end
$scope begin genblk1[5] $end
$var parameter 32 )# j $end
$upscope $end
$scope begin genblk1[4] $end
$var parameter 32 *# j $end
$upscope $end
$scope begin genblk1[3] $end
$var parameter 32 +# j $end
$upscope $end
$scope begin genblk1[2] $end
$var parameter 32 ,# j $end
$upscope $end
$scope begin genblk1[1] $end
$var parameter 32 -# j $end
$upscope $end
$upscope $end
$upscope $end
$scope module glbl $end
$var parameter 32 .# ROC_WIDTH $end
$var parameter 32 /# TOC_WIDTH $end
$var parameter 32 0# GRES_WIDTH $end
$var parameter 32 1# GRES_START $end
$var wire 1 2# GSR $end
$var wire 1 3# GTS $end
$var wire 1 4# GWE $end
$var wire 1 5# PRLD $end
$var wire 1 6# GRESTORE $end
$var tri1 1 7# p_up_tmp $end
$var tri 1 8# PLL_LOCKG $end
$var wire 1 9# PROGB_GLBL $end
$var wire 1 :# CCLKO_GLBL $end
$var wire 1 ;# FCSBO_GLBL $end
$var wire 1 <# DO_GLBL [3] $end
$var wire 1 =# DO_GLBL [2] $end
$var wire 1 ># DO_GLBL [1] $end
$var wire 1 ?# DO_GLBL [0] $end
$var wire 1 @# DI_GLBL [3] $end
$var wire 1 A# DI_GLBL [2] $end
$var wire 1 B# DI_GLBL [1] $end
$var wire 1 C# DI_GLBL [0] $end
$var reg 1 D# GSR_int $end
$var reg 1 E# GTS_int $end
$var reg 1 F# PRLD_int $end
$var reg 1 G# GRESTORE_int $end
$var wire 1 H# JTAG_TDO_GLBL $end
$var wire 1 I# JTAG_TCK_GLBL $end
$var wire 1 J# JTAG_TDI_GLBL $end
$var wire 1 K# JTAG_TMS_GLBL $end
$var wire 1 L# JTAG_TRST_GLBL $end
$var reg 1 M# JTAG_CAPTURE_GLBL $end
$var reg 1 N# JTAG_RESET_GLBL $end
$var reg 1 O# JTAG_SHIFT_GLBL $end
$var reg 1 P# JTAG_UPDATE_GLBL $end
$var reg 1 Q# JTAG_RUNTEST_GLBL $end
$var reg 1 R# JTAG_SEL1_GLBL $end
$var reg 1 S# JTAG_SEL2_GLBL $end
$var reg 1 T# JTAG_SEL3_GLBL $end
$var reg 1 U# JTAG_SEL4_GLBL $end
$var reg 1 V# JTAG_USER_TDO1_GLBL $end
$var reg 1 W# JTAG_USER_TDO2_GLBL $end
$var reg 1 X# JTAG_USER_TDO3_GLBL $end
$var reg 1 Y# JTAG_USER_TDO4_GLBL $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
b0 "
b0 #
00
1D#
0E#
1F#
0G#
xM#
xN#
xO#
xP#
xQ#
0R#
0S#
0T#
0U#
zV#
zW#
zX#
zY#
b110 !
b110 1
b1 -#
b10 ,#
b11 +#
b100 *#
b101 )#
b110 (#
b0 w"
b110 x"
b0 y"
b1 H"
b110 I"
b1 J"
b0 v"
b1 s"
b10 p"
b11 m"
b100 j"
b101 i"
b10 w!
b110 x!
b10 y!
b0 G"
b1 D"
b10 A"
b11 >"
b100 ;"
b101 :"
b11 H!
b110 I!
b11 J!
b0 v!
b1 s!
b10 p!
b11 m!
b100 j!
b101 i!
b100 w
b110 x
b100 y
b0 G!
b1 D!
b10 A!
b11 >!
b100 ;!
b101 :!
b101 G
b110 H
b101 I
b0 v
b1 s
b10 p
b11 m
b100 j
b101 g
b11000011010100000 .#
b0 /#
b10011100010000 0#
b10011100010000 1#
0/
0.
0-
0,
0+
0*
0)
0(
0'
0&
0%
0$
0>
0T
0S
0R
0Q
0P
0'!
0&!
0%!
0$!
0#!
0"!
0V!
0U!
0T!
0S!
0R!
0Q!
0'"
0&"
0%"
0$"
0#"
0""
0V"
0U"
0T"
0S"
0R"
0Q"
0'#
0&#
0%#
0$#
0##
0"#
0?
0O
0N
0M
0L
0K
0J
0!!
0~
0}
0|
0{
0z
0P!
0O!
0N!
0M!
0L!
0K!
0!"
0~!
0}!
0|!
0{!
0z!
0P"
0O"
0N"
0M"
0L"
0K"
0!#
0~"
0}"
0|"
0{"
0z"
zF
0E
0D
0C
0B
0A
0@
0\"
0["
0Z"
0Y"
0X"
0W"
0b"
0a"
0`"
0_"
0^"
0]"
0h"
0g"
0f"
0e"
0d"
0c"
0t"
0u"
0q"
0r"
0n"
0o"
0k"
0l"
0-"
0,"
0+"
0*"
0)"
0("
03"
02"
01"
00"
0/"
0."
09"
08"
07"
06"
05"
04"
0E"
0F"
0B"
0C"
0?"
0@"
0<"
0="
0\!
0[!
0Z!
0Y!
0X!
0W!
0b!
0a!
0`!
0_!
0^!
0]!
0h!
0g!
0f!
0e!
0d!
0c!
0t!
0u!
0q!
0r!
0n!
0o!
0k!
0l!
0-!
0,!
0+!
0*!
0)!
0(!
03!
02!
01!
00!
0/!
0.!
09!
08!
07!
06!
05!
04!
0E!
0F!
0B!
0C!
0?!
0@!
0<!
0=!
0Z
0Y
0X
0W
0V
0U
0`
0_
0^
0]
0\
0[
0f
0e
0d
0c
0b
0a
0t
0u
0q
0r
0n
0o
0k
0l
0h
0i
12#
03#
z4#
15#
06#
17#
18#
z9#
z:#
z;#
z?#
z>#
z=#
z<#
zC#
zB#
zA#
z@#
zH#
zI#
zJ#
zK#
zL#
0=
0<
0;
0:
09
08
07
06
05
04
03
02
$end
#5000
10
#10000
b11 "
b10 #
1G#
00
1<
17
16
16#
1\"
1["
1u"
1U"
1V"
1.
1!"
13"
1'"
1-
#15000
10
#20000
b100 "
b101 #
0G#
00
1=
0<
1;
07
06
15
06#
1+"
0\"
0["
1%#
0u"
0U"
0V"
1C"
1%"
0.
1O!
0!"
1O"
1a"
03"
1a!
1u!
1U!
0'"
1u"
1U"
0-
1!"
1!!
13!
13"
1'"
1'!
1+
1-
#25000
10
#30000
b110 "
b111 #
00
1<
16
1&#
1,"
1["
1Z"
1r"
1T"
1t"
0u"
0U"
1F"
1&"
1g"
0T"
1f"
1S"
1P!
0!"
1}!
1P"
1b"
03"
11"
1b!
1V!
1B"
0C"
0%"
0'"
1V"
1.
0-
17"
1,
1$"
0O!
1N!
0a!
1`!
1r!
1T!
0u!
0U!
0!!
1~
03!
12!
1F!
1&!
0'!
0+
1O
1`
1>
1*
#35000
10
#40000
b1000 "
b1001 #
00
0<
0;
1:
06
05
14
0&#
0%#
1$#
1Y!
0,"
0+"
0["
0Z"
0r"
1T"
0t"
1u"
1U"
0B"
1C"
1%"
0F"
0&"
1o!
1S!
07"
0g"
0f"
0S"
0T"
0$"
1}
0P!
1O!
0N!
1!"
0}!
0P"
0O"
1N"
0b"
0a"
1`"
13"
01"
0b!
1a!
0`!
11!
1C!
1%!
0r!
0T!
1u!
1U!
0V!
0C"
0%"
1'"
1r"
1T"
0u"
0U"
0V"
0.
1-
0,
0!"
1~!
0O!
1!!
0~
1N
1_
13!
02!
0a!
03"
12"
1F"
1&"
0'"
0u!
0U!
0F!
0&!
1'!
1u
1T
1+
0-
1)
1?
0O
0!!
1P!
1b!
03!
0`
0>
0'!
1V!
1,
0+
0*
#45000
10
#50000
b11 "
b101 #
00
1;
0:
17
16
04
1'#
1&#
0$#
0Y!
1-"
1,"
1E"
0F"
0&"
1'"
0o!
0S!
1/
1-
18"
1%"
0}
0P!
1O!
1P"
0N"
1b"
0`"
0b!
1a!
01!
0C!
0%!
1u!
1U!
0V!
0r"
0T"
1V"
1.
0,
0~!
1!!
0N
0_
13!
02"
0E"
1F"
1&"
1'!
0u
0T
1+
08"
0%"
0)
0?
1P!
0O!
1b!
0a!
0u!
0U!
1V!
1,
0!!
03!
0'!
0+
#55000
10
